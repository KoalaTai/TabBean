# Secure Tab Manager Developer Guide

## Setting Up the Development Environment

1. Clone the repository:
   ```
   git clone https://github.com/yourusername/secure-tab-manager.git
   cd secure-tab-manager
   ```

2. Install dependencies:
   ```
   npm run install:all
   ```

3. Set up environment variables:
   - Copy `.env.example` to `.env` in both `extension/` and `backend/` directories
   - Fill in the necessary environment variables

## Development Workflow

### Backend

1. Start the development server:
   ```
   npm run dev:backend
   ```

2. The server will be running at `http://localhost:3000`

### Extension

1. Build the extension:
   ```
   npm run build:extension
   ```

2. Load the extension in Chrome:
   - Open `chrome://extensions/`
   - Enable "Developer mode"
   - Click "Load unpacked"
   - Select the `extension/dist` directory

3. To watch for changes and rebuild automatically:
   ```
   cd extension
   npm run watch
   ```

## Testing

- Run backend tests: `npm run test:backend`
- Run extension tests: `npm run test:extension`
- Run all tests: `npm test`
- Run integration tests: `npm run test:integration`

## Building for Production

To build both the backend and extension for production:

```
npm run build
```

## Deployment

- Backend: The backend is set up to deploy to Heroku. Push to the `main` branch to trigger a deployment.
- Extension: Submit the built extension (`extension/dist/secure-tab-manager-extension.zip`) to the Chrome Web Store.

## Architecture Overview

- Backend: Node.js with Express, MongoDB for database
- Extension: React for UI, background scripts for core functionality
- Authentication: Auth0 for user authentication
- Data Encryption: AES encryption for sensitive data

## Contributing

1. Fork the repository
2. Create your feature branch: `git checkout -b feature/AmazingFeature`
3. Commit your changes: `git commit -m 'Add some AmazingFeature'`
4. Push to the branch: `git push origin feature/AmazingFeature`
5. Open a pull request

Please ensure you follow our coding standards and include appropriate tests.

## Security Considerations

- Always sanitize user inputs
- Use HTTPS for all API communications
- Keep dependencies up to date
- Follow the principle of least privilege when requesting permissions

## API Documentation

For detailed API documentation, please refer to [API_DOCS.md](API_DOCS.md).

